#+TITLE: My Stuff
#+OPTIONS: toc:nil num:nil ^:nil

This is part of my configuration of the [[file:starter-kit.org][Emacs Starter Kit]].

* Personal Kit
** Dependencies
   Determine whether required packages are installed. If not, use ELPA
   to install them. Other dependencies are provided by Emacs 24.
#+begin_src emacs-lisp
  (dolist (package '(browse-kill-ring diminish flymake-cursor gtags
                                      highlight-parentheses sml-modeline))
    (unless (package-installed-p package)
      (package-install package)))
#+end_src

** Introduction
   Identify myself.
#+begin_src emacs-lisp
  (setq user-full-name "David Soulayrol"
        user-mail-address "david.soulayrol@gmail.com")
#+end_src

   Set the preferred localisation options.
#+begin_src emacs-lisp
  (setq-default current-language-environment "UTF-8")
  (setq-default default-input-method "rfc1345")
#+end_src

   Leave the scratch buffer empty on startup.
#+begin_src emacs-lisp
  (setq-default initial-scratch-message nil)
#+end_src

   Load some non default Starter Kit files.
#+begin_src emacs-lisp
  (starter-kit-load "misc-recommended")
  (starter-kit-load "org")
#+end_src

** Interface
  Apply some preferred font.
#+begin_src emacs-lisp
  (set-frame-font "-bitstream-Bitstream Vera Sans Mono-normal-normal-normal-*-12-*-*-*-m-0-iso8859-1")
  (setq default-frame-alist '((font . "-bitstream-Bitstream Vera Sans Mono-normal-normal-normal-*-12-*-*-*-m-0-iso8859-1")))
#+end_src

  Display the column number.
#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

  Authorize region narrowing.
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

  Unclutter the mode-line. Well, I believe this is not necessary for
  now in my configuration.
#+begin_src emacs-lisp
;; (when (require 'diminish nil 'noerror)
;;   (eval-after-load "abbrev"
;;     '(diminish 'abbrev-mode "Ab"))
;;   (eval-after-load "yasnippet"
;;     '(diminish 'yas/minor-mode " Y")))
#+end_src

  Replace the scroll bars with a nifty representation in the mode
  line.
#+begin_src emacs-lisp
  (if (require 'sml-modeline nil 'noerror)
      (progn
        (sml-modeline-mode 1)
        (scroll-bar-mode -1))
    (scroll-bar-mode 1)
    (set-scroll-bar-mode 'right))
#+end_src

*** Buffers Management
   Starter-kit binds C-x C-b with IBuffer instead of buffer-menu. Here
   is the configuration of IBuffer.
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
    (quote (("default"
              ("ERC"
                (mode . erc-mode))
              ("Org"
                (mode . org-mode))
              ("Programming"
                (or
                  (mode . c-mode)
                  (mode . c++-mode)
                  (mode . java-mode)
                  (mode . perl-mode)
                  (mode . python-mode)
                  (mode . ruby-mode)
                  (mode . emacs-lisp-mode)
                  ))
              ("Web"
                (or
                  (mode . xhtml-mode)
                  (mode . jabascript-mode)
                  ))
              ))))
#+end_src

** Chat
  First define who I am.
#+begin_src emacs-lisp
  (eval-after-load "erc"
    '(progn
       (setq erc-nick "d_rol")
       (setq erc-user-full-name user-full-name)))
  ;;     (setq erc-autojoin-channels-alist
  ;;           '(("freenode.net" "#emacs" "#foo" "#bar")))))
#+end_src

   I'm using C-c e to open ERC.
#+begin_src emacs-lisp
  (defun ds-connect-erc ()
    (interactive)
    (erc :server "localhost" :port 6667))
  (global-set-key (kbd "C-c e") 'ds-connect-erc)
#+end_src

  Here are unsorted configuration items. I'm not completely used to
  ERC yet.
#+begin_src emacs-lisp
  (setq erc-auto-query 'buffer)
#+end_src

** Editing
*** Basics
  Here, dots are followed by a single space.
#+begin_src emacs-lisp
  (setq-default sentence-end-double-space nil)
#+end_src

  Some editing preferences.
#+begin_src emacs-lisp
  (setq-default truncate-lines 1)
#+end_src

  Make the typed text replace the selection if the selection is
  active. Also allows to delete (not kill) the highlighted region by
  pressing <DEL>.
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

  I don't like trailing spaces. So let's display them in every buffer
  so that I can shamelessly slash them.
#+begin_src emacs-lisp
  (add-hook 'find-file-hook
            '(lambda ()
           "Show trailing spaces and empty lines on every buffer"
               (setq show-trailing-whitespace t
                     indicate-empty-lines t
                     default-indicate-buffer-boundaries 'left)))
#+end_src

*** Kill Ring
    Use browse-kill-ring if available.
    (http://emacs-fu.blogspot.com/2010/04/navigating-kill-ring.html)
#+begin_src emacs-lisp
  (when (require 'browse-kill-ring nil 'noerror)
    (browse-kill-ring-default-keybindings)
    (global-set-key "\C-cy" '(lambda () (interactive) (popup-menu 'yank-menu))))
#+end_src

*** Mails
    Load the post-mode (http://sourceforge.net/projects/post-mode/)
    and configure it.
#+begin_src emacs-lisp
  (when (require 'post nil 'noerror)
    (autoload 'post-mode "post" "mode for e-mail" t)
    (add-to-list 'auto-mode-alist
                 '("\\.*mutt-*\\|.article\\|\\.followup"
                   . post-mode))
    (add-hook 'post-mode-hook
              (lambda()
                (auto-fill-mode t)
                (setq fill-column 72) ; rfc 1855 for usenet messages
                (if (require 'footnote nil 'noerror) (footnote-mode t))
                (if (require 'flyspell nil 'noerror) (flyspell-mode t)))))

  (setq post-fixed-signature-source "~/.mutt/fixed_signature")
  (setq post-random-signature-command "fortune droit")
  (setq post-signature-directory "~/mutt/")
  (setq post-variable-signature-source "~/.mutt/signatures")
#+end_src

** Calendar
#+begin_src emacs-lisp
  (setq french-events
        '((holiday-fixed 1 1 "Jour de l'an")
          (holiday-fixed 1 6 "Épiphanie")
          (holiday-fixed 2 2 "Chandeleur")
          (holiday-fixed 2 14 "Saint Valentin")
          (holiday-fixed 5 1 "Fête du travail")
          (holiday-fixed 5 8 "Commémoration de la capitulation de l'Allemagne en 1945")
          (holiday-fixed 6 21 "Fête de la musique")
          (holiday-fixed 7 14 "Fête nationale")
          (holiday-fixed 8 15 "Assomption")
          (holiday-fixed 11 1 "Toussaint")
          (holiday-fixed 11 11 "Armistice de 1918")
          (holiday-fixed 12 25 "Noël")
          (holiday-easter-etc -47 "Mardi gras")
          (holiday-easter-etc 0 "Pâques")
          (holiday-easter-etc 1 "Lundi de Pâques")
          (holiday-easter-etc 39 "Ascension")
          (holiday-easter-etc 49 "Pentecôte")
          (holiday-easter-etc 50 "Lundi de Pentecôte")
          (holiday-float 5 0 4 "Fête des mères")
          (holiday-float 6 0 3 "Fête des pères")))
  (setq remarkable-days
        '((holiday-fixed 1 7 "Noël orthodoxe")
          (holiday-fixed 3 14 "Journée de Pi")
          (holiday-fixed 3 17 "Saint Patrick")
          (holiday-fixed 3 24 "Journée de Ada Lovelace")
          (holiday-fixed 4 1 "Poisson d'Avril")
          (holiday-fixed 5 25 "Journée de la serviette")
          (holiday-fixed 6 24 "Saint Jean")
          (holiday-fixed 10 31 "Halloween")))
#+end_src

#+begin_src emacs-lisp
    (setq calendar-week-start-day 1
          calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                   "Jeudi" "Vendredi" "Samedi"]
          calendar-month-name-array ["Janvier" "Février" "Mars" "Avril" "Mai"
                                     "Juin" "Juillet" "Août" "Septembre"
                                     "Octobre" "Novembre" "Décembre"]
          calendar-date-style 'european
          calendar-holidays (append french-events remarkable-days)
          calendar-mark-holidays-flag t)
#+end_src

** Org
   All my Org related files are to be found under this directory.
#+begin_src emacs-lisp
  (setq org-directory "~/org/")
#+end_src

   Global parameters for the mode.
#+begin_src emacs-lisp
  (setq org-empty-line-terminates-plain-lists 'true)
  (setq org-blank-before-new-entry nil)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "DEFERRED(f)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-tag-alist '((:startgroup . nil)
                        ("office" . ?o) ("home" . ?h)
                        (:endgroup . nil)
                        (:startgroup . nil)
                        ("computer" . ?c) ("leisure" . ?l)
                        (:endgroup . nil)
                        ("project" . ?p)))
  (setq org-mobile-directory "~/.local/share/owncloud/mobileorg/")
  (setq org-mobile-inbox-for-pull "~/org/from-mobile.org")
#+end_src

   I'm using C-c t to open the file hosting my tasks.
#+begin_src emacs-lisp
  (defun ds-open-tasks ()
    (interactive)
     (find-file "~/org/tasks.org"))
  (global-set-key (kbd "C-c t") 'ds-open-tasks)
#+end_src

   Automatically change an entry to DONE when all children are done.
#+begin_src emacs-lisp
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to TODO otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (org-todo (if (= n-not-done 0) "DONE" "TODO"))))
  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+end_src

*** Agenda
    Agenda should consider entries from my tasks files as well as the
    file generated from remind.
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/tasks.org" "~/org/remind.org"))
#+end_src

    Also plug in the Emacs calendar.
#+begin_src emacs-lisp
  (setq org-agenda-include-diary t)
#+end_src

    Global parameters for agenda. I display two days, and ignore
    scheduled events which are achieved.
#+begin_src emacs-lisp
  (setq org-agenda-span 2)
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-time-grid
        '((daily today require-timed)
         "----------------"
         (800 1000 1200 1400 1600 1800)))
#+end_src

    Custom agenda presentations. Shortcuts with capitals are preferred
    for exports.
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("O" "Agenda and office tasks"
           ((agenda)
            (tags-todo "office"))
           nil ("~/public/office_agenda.html" "~/public/office_agenda.ics"))
          ("H" "Agenda and home tasks"
           ((agenda)
            (tags-todo "home"))
           nil ("~/public/office_home.html" "~/public/office_home.ics"))
          ("d" "Daily Action List"
           ((agenda "" ((org-agenda-ndays 1)
                        (org-agenda-sorting-strategy
                         (quote ((agenda time-up priority-down tag-up) )))
                        (org-deadline-warning-days 0)))))
          ("w" "New Week Action List"
           ((agenda "" ((org-agenda-ndays 7)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-repeating-timestamp-show-all t)
                        (org-agenda-entry-types '(:timestamp :sexp))))))
          ("g" . "GTD contexts")
          ("go" "Office" tags-todo "office")
          ("gh" "Home" tags-todo "home")
          ("ga" "GTD Block Agenda"
           ((tags-todo "office")
            (tags-todo "home")))
          ("P" "Tasks list for printing"
           ((agenda "" ((org-agenda-ndays 1)
                        (org-deadline-warning-days 7)
                        (org-agenda-todo-keyword-format "[ ]")
                        (org-agenda-scheduled-leaders '("" ""))
                        (org-agenda-prefix-format "%t%s")
                        (org-agenda-overriding-header "\nToday\n-----\n")))
            (todo "TODO"
                  ((org-agenda-prefix-format "[ ] %T: ")
                   (org-agenda-sorting-strategy '(tag-up priority-down))
                   (org-agenda-todo-keyword-format "")
                   (org-agenda-overriding-header "\nTasks by Context\n----------------\n"))))
           ((org-agenda-with-colors nil)
            (org-agenda-compact-blocks t)
            (org-agenda-remove-tags t)
            (ps-number-of-columns 2)
            (ps-landscape-mode t))
           ("~/public/tasks.ps"))
          ))
#+end_src

   Configure the way agenda are exported.
#+begin_src emacs-lisp
  (setq org-export-html-style-include-default nil)
  (setq org-agenda-exporter-settings
        '((ps-number-of-columns 2)
          (ps-landscape-mode t)
          (org-agenda-add-entry-text-maxlines 5)
          (htmlize-output-type 'css)))
#+end_src

   TODO: these should be studied.
#+begin_src emacs-lisp
;(setq org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"http://.../style.css\" />
;<link rel=\"stylesheet\" type=\"text/css\" href=\"http://.../org-export.css\" />")
;(setq org-export-html-preamble "<div class=\"org-export\">")
;(setq org-export-html-postamble "</div>")
;(setq org-src-fontify-natively t)
#+end_src

*** Notes
    I'm using C-c r to capture notes.
#+begin_src emacs-lisp
  (define-key global-map "\C-cr" 'org-capture)
#+end_src

    Here are the templates I use to capture notes, references on books
    I'd like to read, or tasks. Unexpected captures should go in the
    =notes.org= file.
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("b" "Book" entry
           (file+headline "tasks.org" "Books")
           "* %^{Title}  %^g
  %i
  ,*Author(s):* %^{Author} \\\\
  
  %?
  
  ,*Review on:* %^t \\
  %a
  %U")
          ("t" "Todo" entry (file+headline "tasks.org" "Tasks")
           "* TODO %^{Brief Description}%^g\nADDED: %U\n%i%?\n")
          ("j" "Journal" entry (file+datetree "journal.org")
           "* %^{Title}  %^g
  %i
  
  %?
  
  %a")))
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src

    Targets for refiling nodes. I want to move nodes from tasks or
    projects in my main file, or in any section of the =someday.org=
    file.
#+begin_src emacs-lisp
  (setq org-refile-targets '(("tasks.org" . (:regexp . "Tasks"))
                             ("tasks.org" . (:tag . "project"))
                             ("tasks.org" . (:regexp . "Books"))
                             ("someday.org" . (:level . 2))))
#+end_src

** Programming
*** Basics
    Starter kit specifies to use spaces for indentation, which is
    good. Set the preferred indentation value (see
    http://www.emacswiki.org/emacs/IndentationBasics).
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)
  (defvaralias 'cperl-indent-level 'tab-width)
#+end_src

   Set my preferred programming styles for the more common languages.
#+begin_src emacs-lisp
  (setq-default c-default-style (quote ((c-mode . "linux") (c++-mode . "linux") (java-mode . "java") (other . "gnu"))))
#+end_src

   Display colourful parenthesis nesting around the point.
#+begin_src emacs-lisp
  (when (require 'highlight-parentheses nil 'noerror)
    (add-hook 'java-mode-hook 'highlight-parentheses-mode)
    (add-hook 'perl-mode-hook 'highlight-parentheses-mode)
    (add-hook 'c++-mode-hook 'highlight-parentheses-mode)
    (add-hook 'c-mode-hook 'highlight-parentheses-mode)
    (add-hook 'emacs-lisp-mode-hook 'highlight-parentheses-mode))
#+end_src

   Authorise [[http://www.emacswiki.org/cgi-bin/wiki/HideShow][Block folding]].
#+begin_src emacs-lisp
  (load-library "hideshow")
  (add-hook 'java-mode-hook 'hs-minor-mode)
  (add-hook 'perl-mode-hook 'hs-minor-mode)
  (add-hook 'c++-mode-hook 'hs-minor-mode)
  (add-hook 'c-mode-hook 'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
#+end_src

   Open folded code on goto.
#+begin_src emacs-lisp
  (defadvice goto-line (after expand-after-goto-line activate compile)
    "hideshow-expand affected block when using goto-line in a collapsed buffer"
    (save-excursion (hs-show-block)))
#+end_src

   Configuring [[http://www.gnu.org/software/global/globaldoc.html][GNU Global]].
#+begin_src emacs-lisp
  (when (require 'gtags "global/gtags.el" 'noerror)
    (add-hook 'java-mode-hook 'gtags-mode)
    (add-hook 'c++-mode-hook 'gtags-mode)
    (add-hook 'c-mode-hook 'gtags-mode))
#+end_src

   Customise the compilation window so that it always popup in the
   same place, and scroll on output by default.
#+begin_src emacs-lisp
  (setq compilation-scroll-output 1)
  (cons '"*Compilation*" 'same-window-buffer-names)
#+end_src

*** Flymake
    Configure flymake so that it gets more easy to control without
    using the mouse.
#+begin_src emacs-lisp
  :; Automatically spawning flymake.
  :;  (this is commented out because it should need a lot of
  :;   customization for the cases)
  ;(add-hook 'find-file-hook 'flymake-find-file-hook)
  (eval-after-load 'flymake '(require 'flymake-cursor))
#+end_src

*** Lua
    Load flymake on Lua buffers.
#+begin_src emacs-lisp
  (when (load "flymake" t)
    (defun flymake-lua-init ()
      "Invoke luac with '-p' to get syntax checking"
      (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                           'flymake-create-temp-inplace))
             (local-file  (file-relative-name
                           temp-file
                           (file-name-directory buffer-file-name))))
        (list "luac" (list "-p" local-file))))

    (push '("\\.lua\\'" flymake-lua-init) flymake-allowed-file-name-masks)
    (push '("^.*luac[0-9.]*\\(.exe\\)?: *\\(.*\\):\\([0-9]+\\): \\(.*\\)$" 2 3 nil 4)
          flymake-err-line-patterns))

  (add-hook 'lua-mode-hook
            '(lambda ()
           "Don't want flymake mode on read only files"
           (if (and (not (null buffer-file-name)) (file-writable-p buffer-file-name))
           (flymake-mode))))
#+end_src

*** Python
    Only fetch the "python" section from the python starter kit for
    now, because cython module does not exist.
#+begin_src emacs-lisp
  (starter-kit-load "python" "python")
#+end_src

    epylint is now provided in the pylint package. If it is not
    available, the following script must replace it in the path
#+begin_src python
  #!/usr/bin/env python

  import re
  import sys

  from subprocess import *

  p = Popen("pylint -f parseable -r n --disable-msg-cat=C,R %s" %
            sys.argv[1], shell = True, stdout = PIPE).stdout

  for line in p.readlines():
      match = re.search("\\[([WE])(, (.+?))?\\]", line)
      if match:
          kind = match.group(1)
          func = match.group(3)

          if kind == "W":
              msg = "Warning"
          else:
              msg = "Error"

          if func:
              line = re.sub("\\[([WE])(, (.+?))?\\]",
                            "%s (%s):" % (msg, func), line)
          else:
              line = re.sub("\\[([WE])?\\]", "%s:" % msg, line)
      print line,

  p.close()
#+end_src

    The following handles pylint outputs with flymake (see
    http://www.emacswiki.org/emacs/PythonMode).
#+begin_src emacs-lisp
  (when (load "flymake" t)
    (defun flymake-pylint-init ()
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "epylint" (list local-file))))

    (add-to-list 'flymake-allowed-file-name-masks
                 '("\\.py\\'" flymake-pylint-init)))

  (add-hook 'python-mode-hook
            '(lambda ()
           "Don't want flymake mode for python regions in rhtml
            files and also on read only files"
           (if (and (not (null buffer-file-name)) (file-writable-p buffer-file-name))
           (flymake-mode))))
#+end_src

    A custom cython mode, replacing the broken configuration which
    comes with the Starter Kit.
#+begin_src emacs-lisp
  (define-derived-mode cython-mode python-mode "Cython"
    (font-lock-add-keywords
     nil
     `((,(concat "\\<\\(NULL"
                 "\\|c\\(def\\|har\\|typedef\\)"
                 "\\|e\\(num\\|xtern\\)"
                 "\\|float"
                 "\\|in\\(clude\\|t\\)"
                 "\\|object\\|public\\|struct\\|type\\|union\\|void"
                 "\\)\\>")
        1 font-lock-keyword-face t))))

  (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
  (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
#+end_src

*** Others
#+begin_src emacs-lisp
  (starter-kit-load "js")
  ;(starter-kit-load "lisp")
#+end_src

** Misc
  Configure TRAMP to use ssh.
#+begin_src emacs-lisp
  (setq-default tramp-default-method "ssh")
#+end_src
